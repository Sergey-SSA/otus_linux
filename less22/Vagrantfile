# -*- mode: ruby -*-
# vi: set ft=ruby :
Mashines = {
    :r1 => {
#	:box_name => "centos/7",
#	:ip_addr => '172.16.10.10',
    },
    :r2 => {
#	:box_name => "centos/7",
#	:ip_addr => '172.16.10.20',
    },
    :r3 => {
#	:box_name => "centos/7",
#	:ip_addr => '172.16.10.30',
    },
}

Vagrant.configure(2) do |config|
    config.vm.box = "centos/7"
    config.vm.box_version = "1905.1"
  
    config.vm.provider "virtualbox" do |v|
      v.memory = 256
      v.cpus = 1
    end
  
    config.vm.define "r1" do |r1|
      r1.vm.network "private_network", ip: "172.16.10.10"
      r1.vm.network "private_network", ip: "1.1.1.1", virtualbox__intnet: "tlink1"
      r1.vm.network "private_network", ip: "1.1.3.1", virtualbox__intnet: "tlink3"
      r1.vm.hostname = "r1"
    end
  
    config.vm.define "r2" do |r2|
      r2.vm.network "private_network", ip: "172.16.10.20"
      r2.vm.network "private_network", ip: "1.1.1.2", virtualbox__intnet: "tlink1"
      r2.vm.network "private_network", ip: "1.1.2.1", virtualbox__intnet: "tlink2"
      r2.vm.hostname = "r2"
    end
  
    config.vm.define "r3" do |r3|
      r3.vm.network "private_network", ip: "172.16.10.30"
      r3.vm.network "private_network", ip: "1.1.2.2", virtualbox__intnet: "tlink2"
      r3.vm.network "private_network", ip: "1.1.3.2", virtualbox__intnet: "tlink3"
      r3.vm.hostname = "r3"
    end

    config.vm.provision "shell", inline: <<-SHELL
    mkdir -p ~root/.ssh
    cp ~vagrant/.ssh/auth* ~root/.ssh
    sed -i '65s/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
        systemctl restart sshd
    sudo yum install -y epel-release
    sudo yum install -y ansible
    name=`hostname`
    SHELL

    config.vm.provision :ansible do |ansible|
    ansible.inventory_path = "inventories/all.yml"
    ansible.limit = $name
        ansible.playbook = "less22.yml"
    end	
  
    #config.vm.provision "ansible" do |ansible|
    #  ansible.verbose = "v"
    #  ansible.playbook = "start.yml"
    #  ansible.become = "true"
    #end
  
    #config.vm.provision "shell", run: "always", inline: <<-SHELL
    #  ip route delete default 2>&1 >/dev/null || true
    #  systemctl restart network
    #  SHELL
  
  end